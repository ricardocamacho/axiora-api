# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: axiora-api
# app and org for use with dashboard.serverless.com
app: axiora
org: ricardocamacho21

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'
useDotenv: true

custom:
  # serverless-offline:
  #   noPrependStageInUrl: true
  #   httpPort: 8080
  serviceStage: ${self:service}-${opt:stage}
  dynamodbAxioraTable: ${self:custom.serviceStage}
  snsTopicName: ${self:custom.serviceStage}-processNotification

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-2
  apiGateway:
    shouldStartNameWithService: true

  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'sns:*'
          Resource:
            - arn:aws:sns:us-east-2:571994632048:${self:custom.snsTopicName}
        - Effect: 'Allow'
          Action:
            - 'dynamodb:Query'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
          Resource:
            - arn:aws:dynamodb:us-east-2:571994632048:table/${self:custom.dynamodbAxioraTable}
            - arn:aws:dynamodb:us-east-2:571994632048:table/${self:custom.dynamodbAxioraTable}/index/SK-PK-index

  environment:
    AWS_ACCOUNT_ID: 571994632048
    AWS_ACCOUNT_REGION: us-east-2
    DYNAMODB_AXIORA_TABLE: ${self:custom.dynamodbAxioraTable}
    SNS_TOPIC_NAME: ${self:custom.snsTopicName}
    STAGE: ${env:STAGE}
    JWT_SECRET_KEY: ${env:JWT_SECRET_KEY}
    MELI_CLIENT_ID: ${env:MELI_CLIENT_ID}
    MELI_CLIENT_SECRET: ${env:MELI_CLIENT_SECRET}

functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY /{proxy+}'
  receiveNotification:
    handler: receive-notification.handler
    events:
      - http:
          path: notification/{channel}
          method: post
          cors: true
          request:
            parameters:
              paths:
                channel: true
  processNotification:
    handler: process-notification.handler
    events:
      - sns:
          arn: !Ref processNotification
          topicName: ${self:custom.snsTopicName}

resources:
  Resources:
    axioraTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodbAxioraTable}
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: SK-PK-index
            KeySchema:
              - AttributeName: SK
                KeyType: HASH
              - AttributeName: PK
                KeyType: RANGE
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
    processNotification:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.snsTopicName}

# plugins:
#   - serverless-offline
